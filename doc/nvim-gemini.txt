*nvim-gemini.txt*  A gemini client for neovim

=============================================================================
Usage                                           *nvim-gemini-usage*

First call |nvim-gemini.setup| with an optional table described
in the |nvim-gemini-config|

Next open a gemini url with >sh
    nvim gemini://the-url
<
=============================================================================
Api                                             *nvim-gemini-api*

mimetype_lookup                                 *nvim-gemini.mimetype_lookup*
    A table consisting of key value pairs
    the key is a mimetype, and the value is the corresponding vim filetype
    Default: ~
        text/gemini => gemtext
        text/html => html
        text/markdown => markdown

    See also: ~
        |nvim-gemini.addmime|
        |nvim-gemini.Config.open_mime|


addmime({mimetype}, {filetype}                 *nvim-gemini.addmime*
    Adds {mimetype} with {filetype} as the value to
    |nvim-gemini.mimetype_lookup|


setup({config}?)                                *nvim-gemini.setup*
    sets up the client using the config.

    Parameters: ~
      • {config} (`nvim-gemini.Config`) the configuration to use


request({url})                                  *nvim-gemini.request*
    Make a request to {url}.

    This function will prompt the user to trust the domain if the user
    hasn't trusted it already

    Parameters: ~
      • {url} (`string`) The url to make a request to

    Return: ~
      (`string`, `number`, `string`)
      The response string,
      Status code,
      Metadata info


submitinput({url}, {input})                     *nvim-gemini.submitinput*
    Make a request to {url} using {input} as a query string
    {input} will be automatically uri encoded.

    The request is made using |nvim-gemini.openurl|

    Parameters: ~
      • {url} (`string`) The url to make a request to
      • {input} (`string`) The data to send as a query string


openurl({url})                                  *nvim-gemini.openurl*
    Make a request to {url} using |nvim-gemini.request|.
    It then checks the status code and acts accordingly:
    Status range 10: ~
        Calls |nvim-gemini.Config.input_secret|
        or |nvim-gemini.Config.input| depending on the status code
    Status range 20: ~
        Calls |nvim-gemini.Config.open_mime|
    Status range 30: ~
        Calls |nvim-gemini.openurl| with the new url
    Status range 40: ~
        Prints an error depending on the exact status code
    Status range 50: ~
        Prints an error depending on the exact status code
    Status range 60: ~
        NOT IMPLEMENTED

    Parameters: ~
      • {url} (`string`) The url to open.

openwindow({text}, {url}, {filetype})           *nvim-gemini.openwindow*
    Sets the current buffer's name to {url}
    Sets the lines of the current buffer to {text}
    Sets the filetype of the current buffer to {filetype}
    Lastly, sets 'modified' to false

    Parameters: ~
      • {text} (`string`) The text that the current buffer gets filled with
      • {url} (`string`) The url that the text came from
      • {filetype} (`string`) The filetype of {text}


addbookmark({url}, {label}, {default_line_number}?) *nvim-gemini.addbookmark*
    Adds a bookmark to `bookmark_file` defined in |nvim-gemini.Config|
    if `bookmark_file` is not defined, this function fails.

    bookmarks are stored in the |quickfix| format.

    Parameters: ~
      • {url} (`string`) The url to add to the bookmarks list
      • {label} (`string`) The label that will appear in the |location-list|
      • {default_line_number} (`number`) 
          When following the bookmark, the buffer will be opened on this line
          number.

loadbookmarks({qf}?)                                  *nvim-gemini.loadbookmarks*
    Opens all bookmarks in the |location-list|.
    if {qf} is true, opens in |quickfix| instead.

    Parameters: ~
      • {qf} (`bool`) whether or not to open in th |quickfix| list

=============================================================================
Configuration                                   *nvim-gemini-config*

Configuration table                             *nvim-gemini.Config*

All config values are optional (DO NOT USE THIS CONFIG)
>lua
    {
        -- A key value pair list of client certificate paths for domains
        -- example:
        certificates = {
            ["gemini.amazing-website.com"] = {
                cert = "~/path/to/cert.pem",
                key = "~/path/to/key.pem"
            }
        },
        -- the format of the bookmarks file is simply
        -- the nvim quickfixlist format
        bookmark_file = "", -- the file to store bookmarks
                            -- see |nvim-gemini.addbookmark|
        open_mime = function() end, -- see: |nvim-gemini.Config.open_mime|
        input = function() end, -- see: |nvim-gemini.Config.input|
        input_secret = function() end -- see: |nvim-gemini.Config.input_secret|
    }
<

opem_mime({content}, {url}, {mime})             *nvim-gemini.Config.open_mime*
    This function is called in |nvim-gemini.openurl|
    when the status code is in the 20 range.

    It should open the contents of url with the given mimetype in mind

    Default behavior: ~
	1. Get the corresponding vim filetype using
	    |nvim-gemini.mimetype_lookup|
	2. If the given mimetype is `text/*`, open it using
	    |nvim-gemini.openwindow|
	3. Otherwise, prompt to open externally or with
	    |nvim-gemini.openwindow|
	    To open it externaly, the contents are written to a temp file then
	    |vim.ui.open| is called with that temp file

    Parameters: ~
      • {content} (`string`) The contents of the response
      • {url} (`string`) the url where {content} came from
      • {mime} (`string`) the mimetype of {content} according to {url}


input({url}, {prompt})                          *nvim-gemini.Config.input*
    Should:
      • Display {prompt}
      • Ask the user to type something
      • call |nvim-gemini.submitinput| with the given {url} and response

    Default behavior: ~
        open a floating window with {prompt} as the title
        when the user writes the buffer with |:w|, it submits the buffer
        contents with |nvim-gemini.submitinput|


input_secret({url}, {prompt})                   *nvim-gemini.Config.input_secret*
    Should do the same things as |nvim-gemini.Config.input|, but assume the
    data being typed is sensitive, and should likely be hidden

    Default behavior: ~
        call |inputsecret()| with the given prompt
        submit the response with |nvim-gemini.submitinput|

 vim:tw=78:ts=8:ft=help:norl:
